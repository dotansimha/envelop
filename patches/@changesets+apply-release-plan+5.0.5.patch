diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index 4bbfe2e..51c320f 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -116,6 +116,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {
 const DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies", "optionalDependencies"];
 function versionPackage(release, versionsToUpdate, {
   updateInternalDependencies,
+  ignoreRange,
   onlyUpdatePeerDependentsWhenOutOfRange,
   bumpVersionsWithWorkspaceProtocolOnly
 }) {
@@ -173,7 +174,7 @@ function versionPackage(release, versionsToUpdate, {
         // leaving those as is would leave the package in a non-installable state (wrong dep versions would get installed)
         semver__default['default'].prerelease(version) !== null) {
           let rangeType = getVersionRangeType__default['default'](depCurrentVersion);
-          let newNewRange = `${rangeType}${version}`;
+          let newNewRange = ignoreRange ? version : `${rangeType}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
         }
@@ -287,7 +288,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   return commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir;
   let touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [x.packageJson.name, x]));
@@ -324,6 +325,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
 
   let finalisedRelease = releaseWithChangelogs.map(release => {
     return versionPackage(release, versionsToUpdate, {
+      ignoreRange,
       updateInternalDependencies: config$1.updateInternalDependencies,
       onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
       bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index a327caf..2d240fe 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -64,7 +64,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {depVersionRange: depVersi
 
 const DEPENDENCY_TYPES = [ "dependencies", "devDependencies", "peerDependencies", "optionalDependencies" ];
 
-function versionPackage(release, versionsToUpdate, {updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly: bumpVersionsWithWorkspaceProtocolOnly}) {
+function versionPackage(release, versionsToUpdate, {ignoreRange, updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly: bumpVersionsWithWorkspaceProtocolOnly}) {
   let {newVersion: newVersion, packageJson: packageJson} = release;
   packageJson.version = newVersion;
   for (let depType of DEPENDENCY_TYPES) {
@@ -89,7 +89,7 @@ function versionPackage(release, versionsToUpdate, {updateInternalDependencies:
           depCurrentVersion = workspaceDepVersion;
         }
         if ("" !== new semver__default.default.Range(depCurrentVersion).range || null !== semver__default.default.prerelease(version)) {
-          let newNewRange = `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
+          let newNewRange = ignoreRange ? version : `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
           usesWorkspaceRange && (newNewRange = "workspace:" + newNewRange), deps[name] = newNewRange;
         }
       }
@@ -167,7 +167,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   })), commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir, touchedFiles = [];
   const packagesByName = new Map(packages.packages.map((x => [ x.packageJson.name, x ])));
   let {releases: releases, changesets: changesets} = releasePlan;
@@ -183,6 +183,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
     version: newVersion,
     type: type
   }))), finalisedRelease = releaseWithChangelogs.map((release => versionPackage(release, versionsToUpdate, {
+    ignoreRange,
     updateInternalDependencies: config$1.updateInternalDependencies,
     onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
     bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
